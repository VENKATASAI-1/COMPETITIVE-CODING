#include <stdio.h>
#include <stdlib.h>


typedef struct Node {
    int data;           
    struct Node* next;  
} Node;


typedef struct Stack {
    Node* top;  
    int size;   
} Stack;


void initStack(Stack* stack) {
    stack->top = NULL;  
    stack->size = 0;    
}


int isEmpty(Stack* stack) {
    return stack->top == NULL;  
}


void push(Stack* stack, int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));  
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        return;
    }
    newNode->data = value;         
    newNode->next = stack->top;    
    stack->top = newNode;          
    stack->size++;               
    printf("Pushed %d onto the stack\n", value);
}


int pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow! Cannot pop\n");
        return -1;  
    }
    Node* temp = stack->top;       
    int poppedValue = temp->data;  
    stack->top = stack->top->next;  
    free(temp);                    
    stack->size--;                 
    return poppedValue;
}


int peek(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty!\n");
        return -1;  
    }
    return stack->top->data; 
}


int size(Stack* stack) {
    return stack->size;
}


void display(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty!\n");
        return;
    }
    Node* current = stack->top;
    printf("Stack contents: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}


int main() {
    Stack stack;
    initStack(&stack);  

    
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);

    display(&stack);

    
    printf("Peek top element: %d\n", peek(&stack));

    
    printf("Popped element: %d\n", pop(&stack));

    
    display(&stack);

    
    printf("Current stack size: %d\n", size(&stack));

    
    pop(&stack);
    pop(&stack);


    pop(&stack);  

    return 0;
}
