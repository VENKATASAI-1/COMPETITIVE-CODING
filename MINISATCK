#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100  

typedef struct {
    int arr[MAX_SIZE]; 
    int top;             
} MiniStack;


void initStack(MiniStack *stack) {
    stack->top = -1; 
}


int isEmpty(MiniStack *stack) {
    return stack->top == -1;
}


int isFull(MiniStack *stack) {
    return stack->top == MAX_SIZE - 1;
}


void push(MiniStack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow! Cannot push %d\n", value);
        return;
    }
    stack->arr[++(stack->top)] = value;  
}


int pop(MiniStack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow! Cannot pop\n");
        return -1;  
    }
    return stack->arr[(stack->top)--];  
}


int peek(MiniStack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty!\n");
        return -1;  
    }
    return stack->arr[stack->top];  
}


int size(MiniStack *stack) {
    return stack->top + 1; 
}


void display(MiniStack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty!\n");
        return;
    }
    printf("Stack contents: ");
    for (int i = 0; i <= stack->top; i++) {
        printf("%d ", stack->arr[i]);
    }
    printf("\n");
}


int main() {
    MiniStack stack;
    initStack(&stack);

    
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);


    display(&stack);

   
    printf("Peek top element: %d\n", peek(&stack));

    printf("Popped element: %d\n", pop(&stack));

    
    display(&stack);

    
    printf("Current stack size: %d\n", size(&stack));

    
    push(&stack, 40);
    push(&stack, 50);
    display(&stack);

    
    pop(&stack);
    pop(&stack);
    pop(&stack);
    pop(&stack);  

    return 0;
}
